// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @unique @default(uuid())
  email           String            @unique
  firstName       String            @map("first_name")
  lastName        String            @map("last_name")
  phoneNumber     String            @map("phone_number")
  bvn             String            @map("bank_verfication_number")
  sex             Gender?
  address         String?
  city            String?
  state           String?
  financials      FinancialDetails?
  nextOfKin       NextOfKin?
  otp             Otp?
  wallet          Wallet?
  password        String
  isEmailVerified Boolean           @default(false)
  createdOn       DateTime          @default(now()) @map("created_on")
  updatedOn       DateTime          @updatedAt @map("updated_on")
}

model NextOfKin {
  id            String   @id @default(uuid())
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  sex           Gender
  phoneNumber   String   @map("phone_number")
  relationship  String
  bankName      String   @map("bank_name")
  accountNumber String   @map("account_number")
  accountName   String   @map("account_name")
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  createdOn     DateTime @default(now()) @map("created_on")
  updatedOn     DateTime @updatedAt @map("updated_on")
}

model Otp {
  id             String   @id @default(uuid())
  otpCode        String   @map("otp")
  otpCodeExpires DateTime @map("otp_expires_at")
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  createdOn      DateTime @default(now()) @map("created_on")
  updatedOn      DateTime @updatedAt @map("updated_on")
}

model Wallet {
  id            String   @id @default(uuid())
  accountNumber String   @map("account_number")
  bankName      String   @map("bank_name")
  balance       String   @map("account_balance")
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  createdOn     DateTime @default(now()) @map("created_on")
  updatedOn     DateTime @default(now()) @map("updated_on")
}

enum Gender {
  Male
  Female
  Other
}

enum FinancialDetails {
  NGN_5000_25000
  NGN_25000_50000
  NGN_50000_100000
  NGN_100000_150000
  NGN_150000_250000
  NGN_250000_upwards
}
